clear variables;
close all;
clc;

%% Calibration images
imagesCameraCalibrationLeft = imageSet('pictures/calibration1/calibrationLeft');
imagesCameraCalibrationMiddle = imageSet('pictures/calibration1/calibrationMiddle');
imagesCameraCalibrationRight = imageSet('pictures/calibration1/calibrationRight');

%% Select subject, expression and calibration image set
%Subject 1,2 or 4
subject = 4;
%expression 1 to 5
expression = 2;
%Calibration set 1 seems to work better then the second
calibration = 1;
%Set as one when switching from images.
recalibrate =1;

%% Subject 1
switch subject 
    case 1
        imagesSubjectLeft = imageSet('pictures/subject1/subject1Left');
        imagesSubjectMiddle = imageSet('pictures/subject1/subject1Middle');
        imagesSubjectRight = imageSet('pictures/subject1/subject1Right');

        subjectLeft = read(imagesSubjectLeft,expression);
        subjectMiddle = read(imagesSubjectMiddle,expression);
        subjectRight = read(imagesSubjectRight,expression);
    case 2
        imagesSubjectLeft = imageSet('pictures/subject2/subject2_Left');
        imagesSubjectMiddle = imageSet('pictures/subject2/subject2_Middle');
        imagesSubjectRight = imageSet('pictures/subject2/subject2_Right');

        subjectLeft = read(imagesSubjectLeft,expression);
        subjectMiddle = read(imagesSubjectMiddle,expression);
        subjectRight = read(imagesSubjectRight,expression);
    case 4
        imagesSubjectLeft = imageSet('pictures/subject4/subject4_Left');
        imagesSubjectMiddle = imageSet('pictures/subject4/subject4_Middle');
        imagesSubjectRight = imageSet('pictures/subject4/subject4_Right');

        subjectLeft = read(imagesSubjectLeft,expression);
        subjectMiddle = read(imagesSubjectMiddle,expression);
        subjectRight = read(imagesSubjectRight,expression);
end


switch calibration 
    case 1
        if recalibrate == 1
            [params, pairsUsed, worldPoints] = CalibrationMiddleRight1();
            save params params
            save worldPoints worldPoints

            [params2, pairsUsed2, worldPoints2] = CalibrationRightMiddle1();
            save params2 params2
            save worldPoints2 worldPoints2

            [params3, pairsUsed3, worldPoints3] = CalibrationMiddleLeft1();
            save params3 params3
            save worldPoints3 worldPoints3

            [params4, pairsUsed4, worldPoints4] = CalibrationLeftMiddle1();
            save params4 params4
            save worldPoints4 worldPoints4
        else
            load worldPoints
            load params
            load worldPoints2
            load params2
            load worldPoints3
            load params3
            load worldPoints4
            load params4
        end
    case 2
         if recalibrate == 1
             [params, pairsUsed, worldPoints] = CalibrationMiddleRight2();
             save params params
             save worldPoints worldPoints

             [params2, pairsUsed2, worldPoints2] = CalibrationRightMiddle2();
             save params2 params2
             save worldPoints2 worldPoints2

             [params3, pairsUsed3, worldPoints3] = CalibrationMiddleLeft2();
             save params3 params3
             save worldPoints3 worldPoints3

            [params4, pairsUsed4, worldPoints4] = CalibrationLeftMiddle2();
            save params4 params4
            save worldPoints4 worldPoints4
         else
            load worldPoints
            load params
            load worldPoints2
            load params2
            load worldPoints3
            load params3
            load worldPoints4
            load params4
         end
end
%showExtrinsics(params3);
%Color normalize over all images
[subjectLeft,subjectMiddle,subjectRight] = colorNormalization(subjectLeft,subjectMiddle,subjectRight);

%Rectify image with background
[rectMiddleRight , rectRight] = rectifyStereoImages(subjectMiddle,subjectRight,params,'OutputView','full');
[rectLeft, rectMiddleLeft] = rectifyStereoImages(subjectLeft,subjectMiddle,params3, 'OutputView','full');

%Rectify image without with background used a mask 
[NoBGRectMiddleRight , NoBGRectRight] = rectifyStereoImages(removeBG(subjectMiddle, 0),removeBG(subjectRight, 1),params,'OutputView','full');
[NoBGRectLeft, NoBGRectMiddleLeft] = rectifyStereoImages(removeBG(subjectLeft, 0),removeBG(subjectMiddle, 0),params3, 'OutputView','full');

switch subject 
    case 1
        %Create the pointcloud using a disparity map and return unreliable points
        [ptCloud1, unreliables1, disparityMap1, points3D1]  = createPointcloud(rectMiddleRight, rectRight,params,248, 376, NoBGRectMiddleRight);
        [ptCloud2, unreliables2, disparityMap2, points3D2]  = createPointcloud(rectLeft,rectMiddleLeft,params3, 248, 376, NoBGRectLeft);

    case 2
        %Create the pointcloud using a disparity map and return unreliable points
        [ptCloud1, unreliables1, disparityMap1, points3D1]  = createPointcloud(rectMiddleRight, rectRight,params,256 , 384, NoBGRectMiddleRight);
        [ptCloud2, unreliables2, disparityMap2, points3D2]  = createPointcloud(rectLeft,rectMiddleLeft,params3, 256, 384, NoBGRectLeft);

    case 4
        %Create the pointcloud using a disparity map and return unreliable points
        [ptCloud1, unreliables1, disparityMap1, points3D1]  = createPointcloud(rectMiddleRight, rectRight,params,326, 454, NoBGRectMiddleRight);
        [ptCloud2, unreliables2, disparityMap2, points3D2]  = createPointcloud(rectLeft,rectMiddleLeft,params3, 310, 438, NoBGRectLeft);
end


TR1 = create_3D_mesh(disparityMap1, points3D1, unreliables1, NoBGRectMiddleRight);
TR2 = create_3D_mesh(disparityMap2, points3D2, unreliables2, NoBGRectLeft);

%figure; pcshow(ptCloud1);
%figure; pcshow(ptCloud2);

% Tranform according to the camera parameters to make it easier of the
% algorithm to line up
trans = params2.TranslationOfCamera2;
rot = params2.RotationOfCamera2;
tform = rigid3d(rot,trans);

trans = params.TranslationOfCamera2;
rot = params.RotationOfCamera2;
tform2 = rigid3d(rot,trans);

ptCloudRef = pctransform(ptCloud1,tform);
ptCloudCurrent =pctransform(ptCloud2,tform2);
figure; pcshow(ptCloudRef)

%Align pointclouds using ICP
gridSize = 10;
fixed = pcdownsample(ptCloudRef, 'gridAverage', gridSize);
moving = pcdownsample(ptCloudCurrent, 'gridAverage', gridSize);
tform = pcregistericp(moving, fixed, 'Metric','pointToPlane','Extrapolate', true);

%Adjust pointcloud using tform gotten using ICP
ptCloudAligned = pctransform(ptCloudCurrent,tform);
figure;pcshowpair(ptCloudAligned, ptCloudRef);

% %Merge pointclouds
ptCloudOut = pcmerge(ptCloudAligned, ptCloudRef, 1);
figure; pcshow(ptCloudOut);
% 
% Start making mesh beginning
ptCloudOut = pcdownsample(ptCloudOut, 'gridAverage', gridSize);
x = double(ptCloudOut.Location(:,1));
y = double(ptCloudOut.Location(:,2));
z = double(ptCloudOut.Location(:,3));
trimesh = delaunay(x,y);
point1 = trimesh(:,1); % x,y,z 1
point2 = trimesh(:,2); % x,y,z 2
point3 = trimesh(:,3); % x,y,z 3
% figure;triplot(trimesh,x,y);
for c = 1:size(point1)
    A= [x(point1(c)),y(point1(c))];
    B= [x(point2(c)),y(point2(c))];
    C= [x(point3(c)),y(point3(c))];
    if norm(A-B)>25 || norm(B-C)>25 || norm(A-C)>25
        trimesh(c,:)=[nan nan nan];
    end
end
trimesh = rmmissing(trimesh);
figure;triplot(trimesh,x,y);
surf = trisurf(trimesh,x,y,z);
shading interp

function [TR]= create_3D_mesh(disparityMap, pc, unreliable, J1)
%% create a connectivity structure
    [M, N] = size(disparityMap);         % get image size
    res = 2;                             % resolution of mesh
    [nI,mI] = meshgrid(1:res:N,1:res:M); % create a 2D meshgrid of pixels, thus defining a resolution grid
    TRI = delaunay(nI(:),mI(:));         % create a triangle connectivity list
    indI = sub2ind([M,N],mI(:),nI(:));   % cast grid points to linear indices

    %% linearize the arrays and adapt to chosen resolution
    pcl = reshape(pc,N*M,3); % reshape to (N*M)x3
    J1l = reshape(J1,N*M,3); % reshape to (N*M)x3
    pcl = pcl(indI,:);       % select 3D points that are on resolution grid
    J1l = J1l(indI,:);       % select pixels that are on the resolution grid

    %% remove the unreliable points and the associated triangles
    ind_unreliable = find(unreliable(indI));% get the linear indices of unreliable 3D points
    imem = ismember(TRI(:),ind_unreliable); % find indices of references to unreliable points
    [ir,~] = ind2sub(size(TRI),find(imem)); % get the indices of rows with refs to unreliable points.
    TRI(ir,:) = [];              % dispose them
    iused = unique(TRI(:));      % find the ind's of vertices that are in use
    used = zeros(length(pcl),1); % pre-allocate
    used(iused) = 1;             % create a map of used vertices
    map2used = cumsum(used); % conversion table from indices of old vertices to the new one
    pcl = pcl(iused,:);      % remove the unused vertices
    J1l = J1l(iused,:);
    TRI = map2used(TRI);     % update the ind's of vertices

    %% create the 3D mesh
    TR = triangulation(TRI,double(pcl)); % create the object

    %% visualize
    figure;
    TM = trimesh(TR);              % plot the mesh
    set(TM,'FaceVertexCData',J1l); % set colors to input image
    set(TM,'Facecolor','interp');
    % set(TM,'FaceColor','red');   % if you want a colored surface
    set(TM,'EdgeColor','none');    % suppress the edges
    xlabel('x (mm)')
    ylabel('y (mm)')
    zlabel('z (mm)')
    axis([-250 250 -250 250 400 900])
    set(gca,'xdir','reverse')
    set(gca,'zdir','reverse')
    daspect([1,1,1])
    axis tight
end

%% Create point cloud
function [ptCloud, unreliables, disparityMap, points3D] = createPointcloud(J1,J2,stereoParams,min,max, mask)
    J1Gray=rgb2gray(J1);
    J2Gray=rgb2gray(J2);
    %imtool(stereoAnaglyph(J1,J2));
    
    %Create disparity map
    disparityMap = disparitySGM(J1Gray,J2Gray,'DisparityRange',[min max],'UniquenessThreshold',5);
    
    %Make the mask logical to remove it from the disparity map
    mask = rgb2gray(mask);
    mask = imbinarize(mask, 0);
    disparityMap = times(disparityMap, mask);
    
    % Unreliables are set to nan by disparitySGM
    % Replace NaN values to remove holes in the disparity map
    disparityMap(isnan(disparityMap))= -realmax('single');
    disparityMap = imfill(disparityMap,'holes');
      
    %remove outliers using median filter
    disparityMap = medfilt2(disparityMap, [75,75]);
    
    % Create array size of the disparity map and set all values to one
    unreliables = ones(size(disparityMap));
    %Set the usefull point to zero
    unreliables(find(disparityMap~=0)) = 0;
    unreliables(find(disparityMap==-realmax('single'))) = 1;
    %unreliables(find(isnan(disparityMap))) = 1;
    
    %figure; imshow(disparityMap,[min max]);
    %title('Disparity Map');
    %colormap jet;
    %colorbar;
     
    points3D = reconstructScene(disparityMap, stereoParams);
    
    ptCloud = removeInvalidPoints(pcdenoise(pointCloud(points3D, 'Color',  J1)));
end

% This function returns a image without the background
function [removedBgImage] = removeBG(image, right)
    image = im2double(image);

    %Normalize the image
    imageNorm = (image - mean2(image))./std2(image);
    %Set image to grey scale
    imageGrey = rgb2gray(imageNorm);
    
    %Use canny edge detection to get the edges of the person
    utCanny = ut_edge(imageGrey, 'canny', 'sigma', 3, 'hysteresis', [0.06 0.01]);
    
    %Use dilation to connect the edges
    se = strel('diamond',1);
    utCanny = imdilate(utCanny,se);

    %Pad the image according to how the image looks
    %This is used to be able to fill the image, imfill does not fill if the
    %edge is not fully connected. This also means that it does not fill if
    %it is connected to the image border
    if right == 1
        utCanny = padarray(utCanny,[1 1],1,'post');
    else 
        utCanny = padarray(padarray(utCanny,[1 1],1,'post'),[0 1],1,'pre');
    end
    %Fill the padded image
    filled = imfill(utCanny,'holes');
    
    %Remove the padding
    if right == 1
        filled = filled(1:end-1,1:end-1);
    else 
        filled = filled(1:end-1,2:end-1);
    end
    
    removedBgImage = times(image,filled);
end


%This function get the mean of every color channel and calculates the over
%3 images and calculates a normalized image using these mains
function [I1,I2,I3] = colorNormalization(I1,I2,I3)

    %Get the color channels
    redChannel1 = I1(:, :, 1);
    greenChannel1 = I1(:, :, 2);
    blueChannel1 = I1(:, :, 3);
    redChannel2 = I2(:, :, 1);
    greenChannel2 = I2(:, :, 2);
    blueChannel2 = I2(:, :, 3);
    redChannel3 = I3(:, :, 1);
    greenChannel3 = I3(:, :, 2);
    blueChannel3 = I3(:, :, 3);
    %Get the means of color channels
    meanR1 = mean2(redChannel1);
    meanG1 = mean2(greenChannel1);
    meanB1 = mean2(blueChannel1);
    meanR2 = mean2(redChannel2);
    meanG2 = mean2(greenChannel2);
    meanB2 = mean2(blueChannel2);
    meanR3 = mean2(redChannel3);
    meanG3 = mean2(greenChannel3);
    meanB3 = mean2(blueChannel3);

    %Calc the means of color channels across the images
    desiredMeanR = mean([meanR1, meanR2, meanR3]);
    desiredMeanG = mean([meanG1, meanG2, meanG3]);
    desiredMeanB = mean([meanB1, meanB2, meanB3]);

    %Calc a factor for every image to normalize the color
    correctionFactorR1 = desiredMeanR / meanR1;
    correctionFactorG1 = desiredMeanG / meanG1;
    correctionFactorB1 = desiredMeanB / meanB1;

    correctionFactorR2 = desiredMeanR / meanR2;
    correctionFactorG2 = desiredMeanG / meanG2;
    correctionFactorB2 = desiredMeanB / meanB2;

    correctionFactorR3 = desiredMeanR / meanR3;
    correctionFactorG3 = desiredMeanG / meanG3;
    correctionFactorB3 = desiredMeanB / meanB3;

    %Normalize every color channel of every image and combine
    redChannel = uint8(single(redChannel1) * correctionFactorR1);
    greenChannel = uint8(single(greenChannel1) * correctionFactorG1);
    blueChannel = uint8(single(blueChannel1) * correctionFactorB1);
    % Recombine into an RGB image
    I1 = cat(3, redChannel, greenChannel, blueChannel);

    redChannel = uint8(single(redChannel2) * correctionFactorR2);
    greenChannel = uint8(single(greenChannel2) * correctionFactorG2);
    blueChannel = uint8(single(blueChannel2) * correctionFactorB2);
    % Recombine into an RGB image
    I2 = cat(3, redChannel, greenChannel, blueChannel);

    redChannel = uint8(single(redChannel3) * correctionFactorR3);
    greenChannel = uint8(single(greenChannel3) * correctionFactorG3);
    blueChannel = uint8(single(blueChannel3) * correctionFactorB3);
    % Recombine into an RGB image
    I3 = cat(3, redChannel, greenChannel, blueChannel);

end

%% Calibrate Camera unused function
function [params, tform, estimationErrors] = calibrateCamera(images1,images2,squareSize)
    I = readimage(images1,1);
    imageSize = [size(I,1),size(I,2)];
    [imagePoints,boardSize] = ...
    detectCheckerboardPoints(images1.Files,images2.Files);
    worldPoints = generateCheckerboardPoints(boardSize,squareSize);
    [params,~, estimationErrors] = estimateCameraParameters(imagePoints,worldPoints, ...
                                  'ImageSize',imageSize);

end

function [stereoParams, pairsUsed, worldPoints] = CalibrationLeftMiddle1()
    % Define images to process
    imageFileNames1 = {'pictures/calibration1/calibrationMiddle/Calibratie 1_M_1.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_1089.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_1225.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_1361.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_137.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_1497.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_1633.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_1905.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_2041.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_2449.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_2585.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_273.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_409.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_545.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_681.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_817.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_953.jpg',...
        };
    imageFileNames2 = {'pictures/calibration1/calibrationLeft/Calibratie 1_L_1.jpg',...
        'pictures/calibration1/calibrationLeft/Calibratie 1_L_1089.jpg',...
        'pictures/calibration1/calibrationLeft/Calibratie 1_L_1225.jpg',...
        'pictures/calibration1/calibrationLeft/Calibratie 1_L_1361.jpg',...
        'pictures/calibration1/calibrationLeft/Calibratie 1_L_137.jpg',...
        'pictures/calibration1/calibrationLeft/Calibratie 1_L_1497.jpg',...
        'pictures/calibration1/calibrationLeft/Calibratie 1_L_1633.jpg',...
        'pictures/calibration1/calibrationLeft/Calibratie 1_L_1905.jpg',...
        'pictures/calibration1/calibrationLeft/Calibratie 1_L_2041.jpg',...
        'pictures/calibration1/calibrationLeft/Calibratie 1_L_2449.jpg',...
        'pictures/calibration1/calibrationLeft/Calibratie 1_L_2585.jpg',...
        'pictures/calibration1/calibrationLeft/Calibratie 1_L_273.jpg',...
        'pictures/calibration1/calibrationLeft/Calibratie 1_L_409.jpg',...
        'pictures/calibration1/calibrationLeft/Calibratie 1_L_545.jpg',...
        'pictures/calibration1/calibrationLeft/Calibratie 1_L_681.jpg',...
        'pictures/calibration1/calibrationLeft/Calibratie 1_L_817.jpg',...
        'pictures/calibration1/calibrationLeft/Calibratie 1_L_953.jpg',...
        };

    % Detect checkerboards in images
    [imagePoints, boardSize, imagesUsed] = detectCheckerboardPoints(imageFileNames1, imageFileNames2);

    % Generate world coordinates of the checkerboard keypoints
    squareSize = 10;  % in units of 'millimeters'
    worldPoints = generateCheckerboardPoints(boardSize, squareSize);

    % Read one of the images from the first stereo pair
    I1 = imread(imageFileNames1{1});
    [mrows, ncols, ~] = size(I1);

    % Calibrate the camera
    [stereoParams, pairsUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
        'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
        'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'millimeters', ...
        'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
        'ImageSize', [mrows, ncols]);
end

%%
function [stereoParams, pairsUsed, worldPoints] = CalibrationMiddleRight1()
    imageFileNames1 = {'pictures/calibration1/calibrationMiddle/Calibratie 1_M_1089.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_1225.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_1361.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_137.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_1633.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_1769.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_2041.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_2177.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_2313.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_2449.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_273.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_409.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_953.jpg',...
        };
    imageFileNames2 = {'pictures/calibration1/calibrationRight/Calibratie 1_R_1089.jpg',...
        'pictures/calibration1/calibrationRight/Calibratie 1_R_1225.jpg',...
        'pictures/calibration1/calibrationRight/Calibratie 1_R_1361.jpg',...
        'pictures/calibration1/calibrationRight/Calibratie 1_R_137.jpg',...
        'pictures/calibration1/calibrationRight/Calibratie 1_R_1633.jpg',...
        'pictures/calibration1/calibrationRight/Calibratie 1_R_1769.jpg',...
        'pictures/calibration1/calibrationRight/Calibratie 1_R_2041.jpg',...
        'pictures/calibration1/calibrationRight/Calibratie 1_R_2177.jpg',...
        'pictures/calibration1/calibrationRight/Calibratie 1_R_2313.jpg',...
        'pictures/calibration1/calibrationRight/Calibratie 1_R_2449.jpg',...
        'pictures/calibration1/calibrationRight/Calibratie 1_R_273.jpg',...
        'pictures/calibration1/calibrationRight/Calibratie 1_R_409.jpg',...
        'pictures/calibration1/calibrationRight/Calibratie 1_R_953.jpg',...
        };


    % Detect checkerboards in images
    [imagePoints, boardSize, imagesUsed] = detectCheckerboardPoints(imageFileNames1, imageFileNames2);

    % Generate world coordinates of the checkerboard keypoints
    squareSize = 10;  % in units of 'millimeters'
    worldPoints = generateCheckerboardPoints(boardSize, squareSize);

    % Read one of the images from the first stereo pair
    I1 = imread(imageFileNames1{1});
    [mrows, ncols, ~] = size(I1);

    % Calibrate the camera
    [stereoParams, pairsUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
        'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
        'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'millimeters', ...
        'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
        'ImageSize', [mrows, ncols]);

end


%%
function [stereoParams, pairsUsed, worldPoints] = CalibrationRightMiddle1()
% Define images to process
    imageFileNames1 = {'pictures/calibration1/calibrationRight/Calibratie 1_R_1089.jpg',...
        'pictures/calibration1/calibrationRight/Calibratie 1_R_1225.jpg',...
        'pictures/calibration1/calibrationRight/Calibratie 1_R_1361.jpg',...
        'pictures/calibration1/calibrationRight/Calibratie 1_R_137.jpg',...
        'pictures/calibration1/calibrationRight/Calibratie 1_R_1633.jpg',...
        'pictures/calibration1/calibrationRight/Calibratie 1_R_1769.jpg',...
        'pictures/calibration1/calibrationRight/Calibratie 1_R_2041.jpg',...
        'pictures/calibration1/calibrationRight/Calibratie 1_R_2177.jpg',...
        'pictures/calibration1/calibrationRight/Calibratie 1_R_2313.jpg',...
        'pictures/calibration1/calibrationRight/Calibratie 1_R_2449.jpg',...
        'pictures/calibration1/calibrationRight/Calibratie 1_R_273.jpg',...
        'pictures/calibration1/calibrationRight/Calibratie 1_R_409.jpg',...
        'pictures/calibration1/calibrationRight/Calibratie 1_R_953.jpg',...
        };
    imageFileNames2 = {'pictures/calibration1/calibrationMiddle/Calibratie 1_M_1089.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_1225.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_1361.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_137.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_1633.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_1769.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_2041.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_2177.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_2313.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_2449.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_273.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_409.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_953.jpg',...
        };


    % Detect checkerboards in images
    [imagePoints, boardSize, imagesUsed] = detectCheckerboardPoints(imageFileNames1, imageFileNames2);

    % Generate world coordinates of the checkerboard keypoints
    squareSize = 10;  % in units of 'millimeters'
    worldPoints = generateCheckerboardPoints(boardSize, squareSize);

    % Read one of the images from the first stereo pair
    I1 = imread(imageFileNames1{1});
    [mrows, ncols, ~] = size(I1);

    % Calibrate the camera
    [stereoParams, pairsUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
        'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
        'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'millimeters', ...
        'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
        'ImageSize', [mrows, ncols]);
end


function [stereoParams, pairsUsed, worldPoints] = CalibrationMiddleLeft1()
    imageFileNames1 = {'pictures/calibration1/calibrationLeft/Calibratie 1_L_1.jpg',...
        'pictures/calibration1/calibrationLeft/Calibratie 1_L_1089.jpg',...
        'pictures/calibration1/calibrationLeft/Calibratie 1_L_1225.jpg',...
        'pictures/calibration1/calibrationLeft/Calibratie 1_L_1361.jpg',...
        'pictures/calibration1/calibrationLeft/Calibratie 1_L_137.jpg',...
        'pictures/calibration1/calibrationLeft/Calibratie 1_L_1497.jpg',...
        'pictures/calibration1/calibrationLeft/Calibratie 1_L_1905.jpg',...
        'pictures/calibration1/calibrationLeft/Calibratie 1_L_2585.jpg',...
        'pictures/calibration1/calibrationLeft/Calibratie 1_L_273.jpg',...
        'pictures/calibration1/calibrationLeft/Calibratie 1_L_409.jpg',...
        'pictures/calibration1/calibrationLeft/Calibratie 1_L_545.jpg',...
        'pictures/calibration1/calibrationLeft/Calibratie 1_L_681.jpg',...
        'pictures/calibration1/calibrationLeft/Calibratie 1_L_817.jpg',...
        'pictures/calibration1/calibrationLeft/Calibratie 1_L_953.jpg',...
        };
    imageFileNames2 = {'pictures/calibration1/calibrationMiddle/Calibratie 1_M_1.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_1089.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_1225.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_1361.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_137.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_1497.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_1905.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_2585.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_273.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_409.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_545.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_681.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_817.jpg',...
        'pictures/calibration1/calibrationMiddle/Calibratie 1_M_953.jpg',...
        };

    % Detect checkerboards in images
    [imagePoints, boardSize, imagesUsed] = detectCheckerboardPoints(imageFileNames1, imageFileNames2);

    % Generate world coordinates of the checkerboard keypoints
    squareSize = 10;  % in units of 'millimeters'
    worldPoints = generateCheckerboardPoints(boardSize, squareSize);

    % Read one of the images from the first stereo pair
    I1 = imread(imageFileNames1{1});
    [mrows, ncols, ~] = size(I1);

    % Calibrate the camera
    [stereoParams, pairsUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
        'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
        'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'millimeters', ...
        'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
        'ImageSize', [mrows, ncols]);
end

function [stereoParams, pairsUsed, worldPoints] = CalibrationLeftMiddle2()
    % Define images to process
    imageFileNames1 = {'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_1065.jpg',...
        'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_1331.jpg',...
        'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_134.jpg',...
        'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_1464.jpg',...
        'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_1597.jpg',...
        'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_1730.jpg',...
        'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_1863.jpg',...
        'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_1996.jpg',...
        'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_2262.jpg',...
        'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_2395.jpg',...
        'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_2528.jpg',...
        'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_267.jpg',...
        'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_400.jpg',...
        'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_533.jpg',...
        'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_666.jpg',...
        'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_799.jpg',...
        'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_932.jpg',...
        };
    imageFileNames2 = {'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_1065.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_1331.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_134.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_1464.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_1597.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_1730.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_1863.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_1996.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_2262.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_2395.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_2528.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_267.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_400.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_533.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_666.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_799.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_932.jpg',...
        };

    % Detect checkerboards in images
    [imagePoints, boardSize, imagesUsed] = detectCheckerboardPoints(imageFileNames1, imageFileNames2);

    % Generate world coordinates of the checkerboard keypoints
    squareSize = 10;  % in units of 'millimeters'
    worldPoints = generateCheckerboardPoints(boardSize, squareSize);

    % Read one of the images from the first stereo pair
    I1 = imread(imageFileNames1{1});
    [mrows, ncols, ~] = size(I1);

    % Calibrate the camera
    [stereoParams, pairsUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
        'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
        'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'millimeters', ...
        'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
        'ImageSize', [mrows, ncols]);
end

function [stereoParams, pairsUsed, worldPoints] = CalibrationMiddleLeft2()
    % Define images to process
    imageFileNames1 = {'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_1065.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_1331.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_134.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_1464.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_1597.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_1730.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_1863.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_1996.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_2262.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_2395.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_2528.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_267.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_400.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_533.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_666.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_799.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_932.jpg',...
        };
    imageFileNames2 = {'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_1065.jpg',...
        'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_1331.jpg',...
        'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_134.jpg',...
        'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_1464.jpg',...
        'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_1597.jpg',...
        'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_1730.jpg',...
        'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_1863.jpg',...
        'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_1996.jpg',...
        'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_2262.jpg',...
        'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_2395.jpg',...
        'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_2528.jpg',...
        'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_267.jpg',...
        'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_400.jpg',...
        'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_533.jpg',...
        'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_666.jpg',...
        'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_799.jpg',...
        'pictures/Calibratie 2/calibration2Left/Calibratie 2_L_932.jpg',...
        };

    % Detect checkerboards in images
    [imagePoints, boardSize, imagesUsed] = detectCheckerboardPoints(imageFileNames1, imageFileNames2);

    % Generate world coordinates of the checkerboard keypoints
    squareSize = 10;  % in units of 'millimeters'
    worldPoints = generateCheckerboardPoints(boardSize, squareSize);

    % Read one of the images from the first stereo pair
    I1 = imread(imageFileNames1{1});
    [mrows, ncols, ~] = size(I1);

    % Calibrate the camera
    [stereoParams, pairsUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
        'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
        'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'millimeters', ...
        'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
        'ImageSize', [mrows, ncols]);

end

function [stereoParams, pairsUsed, worldPoints] = CalibrationMiddleRight2()
    % Define images to process
    imageFileNames1 = {'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_1065.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_1198.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_134.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_1863.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_1996.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_2262.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_2395.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_2528.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_267.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_400.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_533.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_666.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_799.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_932.jpg',...
        };
    imageFileNames2 = {'pictures/Calibratie 2/calibration2Right/Calibratie 2_R_1065.jpg',...
        'pictures/Calibratie 2/calibration2Right/Calibratie 2_R_1198.jpg',...
        'pictures/Calibratie 2/calibration2Right/Calibratie 2_R_134.jpg',...
        'pictures/Calibratie 2/calibration2Right/Calibratie 2_R_1863.jpg',...
        'pictures/Calibratie 2/calibration2Right/Calibratie 2_R_1996.jpg',...
        'pictures/Calibratie 2/calibration2Right/Calibratie 2_R_2262.jpg',...
        'pictures/Calibratie 2/calibration2Right/Calibratie 2_R_2395.jpg',...
        'pictures/Calibratie 2/calibration2Right/Calibratie 2_R_2528.jpg',...
        'pictures/Calibratie 2/calibration2Right/Calibratie 2_R_267.jpg',...
        'pictures/Calibratie 2/calibration2Right/Calibratie 2_R_400.jpg',...
        'pictures/Calibratie 2/calibration2Right/Calibratie 2_R_533.jpg',...
        'pictures/Calibratie 2/calibration2Right/Calibratie 2_R_666.jpg',...
        'pictures/Calibratie 2/calibration2Right/Calibratie 2_R_799.jpg',...
        'pictures/Calibratie 2/calibration2Right/Calibratie 2_R_932.jpg',...
        };

    % Detect checkerboards in images
    [imagePoints, boardSize, imagesUsed] = detectCheckerboardPoints(imageFileNames1, imageFileNames2);

    % Generate world coordinates of the checkerboard keypoints
    squareSize = 10;  % in units of 'millimeters'
    worldPoints = generateCheckerboardPoints(boardSize, squareSize);

    % Read one of the images from the first stereo pair
    I1 = imread(imageFileNames1{1});
    [mrows, ncols, ~] = size(I1);

    % Calibrate the camera
    [stereoParams, pairsUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
        'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
        'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'millimeters', ...
        'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
        'ImageSize', [mrows, ncols]);
end

function [stereoParams, pairsUsed, worldPoints] = CalibrationRightMiddle2()
    % Define images to process
    imageFileNames1 = {'pictures/Calibratie 2/calibration2Right/Calibratie 2_R_1065.jpg',...
        'pictures/Calibratie 2/calibration2Right/Calibratie 2_R_1198.jpg',...
        'pictures/Calibratie 2/calibration2Right/Calibratie 2_R_134.jpg',...
        'pictures/Calibratie 2/calibration2Right/Calibratie 2_R_1863.jpg',...
        'pictures/Calibratie 2/calibration2Right/Calibratie 2_R_1996.jpg',...
        'pictures/Calibratie 2/calibration2Right/Calibratie 2_R_2262.jpg',...
        'pictures/Calibratie 2/calibration2Right/Calibratie 2_R_2395.jpg',...
        'pictures/Calibratie 2/calibration2Right/Calibratie 2_R_2528.jpg',...
        'pictures/Calibratie 2/calibration2Right/Calibratie 2_R_267.jpg',...
        'pictures/Calibratie 2/calibration2Right/Calibratie 2_R_400.jpg',...
        'pictures/Calibratie 2/calibration2Right/Calibratie 2_R_533.jpg',...
        'pictures/Calibratie 2/calibration2Right/Calibratie 2_R_666.jpg',...
        'pictures/Calibratie 2/calibration2Right/Calibratie 2_R_799.jpg',...
        'pictures/Calibratie 2/calibration2Right/Calibratie 2_R_932.jpg',...
        };
    imageFileNames2 = {'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_1065.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_1198.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_134.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_1863.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_1996.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_2262.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_2395.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_2528.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_267.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_400.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_533.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_666.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_799.jpg',...
        'pictures/Calibratie 2/calibration2Middle/Calibratie 2_M_932.jpg',...
        };

    % Detect checkerboards in images
    [imagePoints, boardSize, imagesUsed] = detectCheckerboardPoints(imageFileNames1, imageFileNames2);

    % Generate world coordinates of the checkerboard keypoints
    squareSize = 10;  % in units of 'millimeters'
    worldPoints = generateCheckerboardPoints(boardSize, squareSize);

    % Read one of the images from the first stereo pair
    I1 = imread(imageFileNames1{1});
    [mrows, ncols, ~] = size(I1);

    % Calibrate the camera
    [stereoParams, pairsUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
        'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
        'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'millimeters', ...
        'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
        'ImageSize', [mrows, ncols]);

end